{"version":3,"sources":["types/CompletedStatus.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["CompletedStatus","TodoItem","todo","onSelectedTodo","selectedTodoId","className","id","completed","cn","title","type","onClick","TodoList","memo","todos","onSelectTodo","map","TodoFilter","query","onChangeInput","onClearInput","onSelectedStatus","selectedOption","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","user","setUser","loadedUser","a","userId","userFromServer","Error","useEffect","href","email","name","App","setTodos","setQuery","selectedStatus","setSelectedStatus","selectedTodo","setSelectedTodo","handleChange","useCallback","handleClearInput","handleSelectingTodo","inputedTodo","handleCloseModal","vissibleTodos","useMemo","filter","lowerQuery","toLowerCase","trim","includes","data","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9227ebf.chunk.js","sourcesContent":["export enum CompletedStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  onSelectedTodo: (todo: Todo) => void;\n  selectedTodoId?: number;\n}\n\nexport const TodoItem: FC<Props> = ({\n  todo,\n  onSelectedTodo,\n  selectedTodoId,\n}) => {\n  return (\n    <>\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {\n          todo.completed && (\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          )\n        }\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-danger': !todo.completed,\n          'has-text-success': todo.completed,\n        })}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectedTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn('fas',\n              {\n                'fa-eye-slash': selectedTodoId === todo.id,\n                'fa-eye': selectedTodoId !== todo.id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </>\n  );\n};\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ninterface Props {\n  todos: Todo[];\n  onSelectTodo: (todo: Todo) => void;\n  selectedTodoId?: number;\n}\n\nexport const TodoList: FC<Props> = memo(({\n  todos,\n  onSelectTodo,\n  selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': selectedTodoId === todo.id,\n              })}\n              key={todo.id}\n            >\n              <TodoItem\n                todo={todo}\n                onSelectedTodo={onSelectTodo}\n                selectedTodoId={selectedTodoId}\n              />\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","import { ChangeEvent, FC, memo } from 'react';\nimport { CompletedStatus } from '../../types/CompletedStatus';\n\ninterface Props {\n  onChangeInput: (event: ChangeEvent<HTMLInputElement>) => void;\n  query: string;\n  onClearInput: () => void;\n  onSelectedStatus: (completedStatus: CompletedStatus) => void;\n  selectedOption: string;\n}\n\nexport const TodoFilter: FC<Props> = memo(({\n  query,\n  onChangeInput,\n  onClearInput,\n  onSelectedStatus,\n  selectedOption,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={event => onSelectedStatus(\n              event.target.value as CompletedStatus,\n            )}\n          >\n            <option value={CompletedStatus.All}>All</option>\n            <option value={CompletedStatus.Active}>\n              Active\n            </option>\n            <option value={CompletedStatus.Completed}>\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => onChangeInput(event)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onClearInput}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, {\n  memo,\n  useEffect,\n  useState,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo | null;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = memo(({\n  todo,\n  onClose,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const loadedUser = async () => {\n    if (todo?.userId) {\n      try {\n        const userFromServer = await getUser(todo.userId);\n\n        setUser(userFromServer);\n      } catch (error) {\n        throw new Error(`Error: ${error}`);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadedUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport {\n  useEffect,\n  useState,\n  FC,\n  ChangeEvent,\n  useCallback,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { CompletedStatus } from './types/CompletedStatus';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState<CompletedStatus>(CompletedStatus.All);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  }, []);\n\n  const handleClearInput = useCallback(() => setQuery(''), []);\n\n  const handleSelectingTodo = useCallback((inputedTodo: Todo) => {\n    setSelectedTodo(inputedTodo);\n  }, []);\n\n  const handleCloseModal = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const vissibleTodos = useMemo(() => todos.filter(({ completed }) => {\n    switch (selectedStatus) {\n      case CompletedStatus.Active:\n        return !completed;\n\n      case CompletedStatus.Completed:\n        return completed;\n\n      case CompletedStatus.All:\n        return true;\n\n      default: return false;\n    }\n  }).filter(todo => {\n    const lowerQuery = query.toLowerCase().trim();\n    const lowerTitle = todo.title.toLowerCase();\n\n    return lowerTitle.includes(lowerQuery);\n  }), [todos, query, selectedStatus]);\n\n  useEffect(() => {\n    getTodos().then(data => {\n      setTodos(data);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onChangeInput={handleChange}\n                query={query}\n                onClearInput={handleClearInput}\n                selectedOption={selectedStatus}\n                onSelectedStatus={setSelectedStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={vissibleTodos}\n                    selectedTodoId={selectedTodo?.id}\n                    onSelectTodo={handleSelectingTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}