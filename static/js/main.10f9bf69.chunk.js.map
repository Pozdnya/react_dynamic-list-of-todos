{"version":3,"sources":["types/CompletedStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["CompletedStatus","TodoList","memo","todos","onClickTodo","clickedTodoId","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","query","onChangeInput","onClearInput","onSelectedStatus","selectedOption","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","setClickedTodoId","useState","user","setUser","loadedUser","useCallback","a","userFromServer","Error","useEffect","href","email","name","App","setTodos","setQuery","selectedStatus","setSelectedStatus","userTodo","setUserTodo","result","handleClearInput","handleUserInfo","vissibleTodos","filter","lowerQuery","toLowerCase","trim","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10f9bf69.chunk.js","sourcesContent":["export enum CompletedStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onClickTodo: (todo: Todo) => void;\n  clickedTodoId: number;\n}\n\nexport const TodoList: FC<Props> = memo(({\n  todos,\n  onClickTodo,\n  clickedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn('', {\n                'has-background-info-light': clickedTodoId,\n              })}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {\n                  todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )\n                }\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onClickTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far',\n                      { 'fa-eye': clickedTodoId !== todo.id },\n                      { 'fa-eye-slash': clickedTodoId === todo.id })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","import { ChangeEvent, FC, memo } from 'react';\nimport { CompletedStatus } from '../../types/CompletedStatus';\n\ninterface Props {\n  onChangeInput: (event: ChangeEvent<HTMLInputElement> | string) => void;\n  query: string;\n  onClearInput: () => void;\n  onSelectedStatus: (completedStatus: CompletedStatus) => void;\n  selectedOption: string;\n}\n\nexport const TodoFilter: FC<Props> = memo(({\n  query,\n  onChangeInput,\n  onClearInput,\n  onSelectedStatus,\n  selectedOption,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={event => onSelectedStatus(\n              event.target.value as CompletedStatus,\n            )}\n          >\n            <option value={CompletedStatus.All}>All</option>\n            <option value={CompletedStatus.Active}>\n              Active\n            </option>\n            <option value={CompletedStatus.Completed}>\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => onChangeInput(event)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onClearInput}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, {\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo | null;\n  setClickedTodoId: (id: number) => void;\n  clickedTodoId: number;\n}\n\nexport const TodoModal: React.FC<Props> = memo(({\n  todo,\n  setClickedTodoId,\n  clickedTodoId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  // const [isShowLoader, setIsShowLoader] = useState(true);\n\n  const loadedUser = useCallback(\n    async () => {\n      try {\n        const userFromServer = await getUser(clickedTodoId);\n\n        setUser(userFromServer);\n      } catch (error) {\n        throw new Error(`Error: ${error}`);\n      }\n    }, [],\n  );\n\n  const handleModalClose = () => {\n    setClickedTodoId(0);\n  };\n\n  useEffect(() => {\n    loadedUser();\n    // setIsShowLoader(false);\n  }, [user]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {/* {isShowLoader ? ( */}\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${user?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn(\n                { 'has-text-success': todo?.completed },\n                { 'has-text-danger': !todo?.completed },\n              )}\n              >\n                {todo?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport {\n  useEffect,\n  useState,\n  FC,\n  ChangeEvent,\n  useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { CompletedStatus } from './types/CompletedStatus';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState<CompletedStatus>(CompletedStatus.All);\n  const [clickedTodoId, setClickedTodoId] = useState(0);\n  const [userTodo, setUserTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos().then(result => {\n      setTodos(result);\n    });\n  }, []);\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement> | string) => {\n    if (typeof event !== 'string') {\n      setQuery(event.target.value);\n    }\n  };\n\n  const handleClearInput = useCallback(() => setQuery(''), []);\n\n  const handleUserInfo = useCallback((todo: Todo) => {\n    setUserTodo(todo);\n    setClickedTodoId(todo.id);\n  }, []);\n\n  let vissibleTodos = todos.filter(todo => {\n    const lowerQuery = query.toLowerCase().trim();\n    const lowerTitle = todo.title.toLowerCase();\n\n    return lowerTitle.includes(lowerQuery);\n  });\n\n  if (selectedStatus !== CompletedStatus.All) {\n    vissibleTodos = vissibleTodos.filter(({ completed }) => {\n      switch (selectedStatus) {\n        case CompletedStatus.Active:\n          return !completed;\n\n        case CompletedStatus.Completed:\n          return completed;\n\n        default: return null;\n      }\n    });\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onChangeInput={handleInput}\n                query={query}\n                onClearInput={handleClearInput}\n                selectedOption={selectedStatus}\n                onSelectedStatus={setSelectedStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length && <Loader />}\n              <TodoList\n                todos={vissibleTodos}\n                onClickTodo={handleUserInfo}\n                clickedTodoId={clickedTodoId}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {clickedTodoId && (\n        <TodoModal\n          todo={userTodo}\n          setClickedTodoId={setClickedTodoId}\n          clickedTodoId={clickedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}