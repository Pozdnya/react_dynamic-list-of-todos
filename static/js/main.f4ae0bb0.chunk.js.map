{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/CompletedStatus.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","todos","onClickUser","isClickedTodoInfo","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","query","onChangeInput","onClearInput","onSelectedStatus","selectedOption","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","CompletedStatus","TodoModal","onClickModal","React","useState","user","setUser","isLoaded","setIsLoaded","useEffect","userId","fetchedUser","href","email","name","App","setTodos","setQuery","All","selectedStatus","setSelectedStatus","setIsClickedTodoInfo","userTodo","setUserTodo","result","handleClearInput","useCallback","handleUserInfo","isClicked","vissibleTodos","lowerQuery","toLowerCase","trim","filter","includes","Active","Completed","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4ae0bb0.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onClickUser: (isClicked: boolean, todo: Todo) => void;\n  isClickedTodoInfo: boolean;\n}\n\nexport const TodoList: FC<Props> = memo(({\n  todos,\n  onClickUser,\n  isClickedTodoInfo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn('', {\n                'has-background-info-light': isClickedTodoInfo,\n              })}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {\n                  todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )\n                }\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onClickUser(!isClickedTodoInfo, todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far fa-eye')} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","import { ChangeEvent, FC, memo } from 'react';\nimport { CompletedStatus } from '../../types/CompletedStatus';\n\ninterface Props {\n  onChangeInput: (event: ChangeEvent<HTMLInputElement> | string) => void;\n  query: string;\n  onClearInput: () => void;\n  onSelectedStatus: (completedStatus: CompletedStatus) => void;\n  selectedOption: string;\n}\n\nexport const TodoFilter: FC<Props> = memo(({\n  query,\n  onChangeInput,\n  onClearInput,\n  onSelectedStatus,\n  selectedOption,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={event => onSelectedStatus(\n              event.target.value as CompletedStatus,\n            )}\n          >\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => onChangeInput(event)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onClearInput}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum CompletedStatus {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n","import React, { memo, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  onClickModal: (click: boolean) => void;\n  todo: Todo | null;\n}\n\nexport const TodoModal: React.FC<Props> = memo(({ todo, onClickModal }) => {\n  const [user, setUser] = React.useState<User | null>(null);\n  const [isLoaded, setIsLoaded] = React.useState(false);\n\n  useEffect(() => {\n    if (todo !== null) {\n      setIsLoaded(true);\n      getUser(todo.userId).then(fetchedUser => setUser(fetchedUser));\n\n      setIsLoaded(false);\n    }\n  }, [todo?.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoaded ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${user?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClickModal(false)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport {\n  useEffect,\n  useState,\n  FC,\n  ChangeEvent,\n  useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { CompletedStatus } from './types/CompletedStatus';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[] | []>([]);\n  const [query, setQuery] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState<CompletedStatus>(CompletedStatus.All);\n  const [isClickedTodoInfo, setIsClickedTodoInfo] = useState(false);\n  const [userTodo, setUserTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    const resultPromise = getTodos();\n\n    resultPromise.then(result => {\n      setTodos(result);\n    });\n  }, []);\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement> | string) => {\n    if (typeof event !== 'string') {\n      setQuery(event.target.value);\n    }\n  };\n\n  const handleClearInput = useCallback(() => setQuery(''), []);\n\n  const handleUserInfo = useCallback((isClicked: boolean, todo: Todo) => {\n    setIsClickedTodoInfo(isClicked);\n    setUserTodo(todo);\n  }, []);\n\n  let vissibleTodos = [...todos];\n\n  if (query) {\n    const lowerQuery = query.toLowerCase().trim();\n\n    vissibleTodos = vissibleTodos.filter(todo => (\n      todo.title.toLowerCase().includes(lowerQuery)\n    ));\n  }\n\n  if (selectedStatus !== CompletedStatus.All) {\n    vissibleTodos = vissibleTodos.filter(todo => {\n      switch (selectedStatus) {\n        case CompletedStatus.Active:\n          return todo.completed === false;\n\n        case CompletedStatus.Completed:\n          return todo.completed === true;\n\n        default: return null;\n      }\n    });\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onChangeInput={handleInput}\n                query={query}\n                onClearInput={handleClearInput}\n                selectedOption={selectedStatus}\n                onSelectedStatus={setSelectedStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={vissibleTodos}\n                    onClickUser={handleUserInfo}\n                    isClickedTodoInfo={isClickedTodoInfo}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isClickedTodoInfo && (\n        <TodoModal\n          onClickModal={setIsClickedTodoInfo}\n          todo={userTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}